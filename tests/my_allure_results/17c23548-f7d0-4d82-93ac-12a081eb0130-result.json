{"name": "Checking the opening of the alert after 5 seconds", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This alert appeared after 5 seconds\nMessage: unexpected alert open: {Alert text : This alert appeared after 5 seconds}\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6975682B2+55298]\n\t(No symbol) [0x00007FF6974D5E02]\n\t(No symbol) [0x00007FF6973905AB]\n\t(No symbol) [0x00007FF69740ACE7]\n\t(No symbol) [0x00007FF6973F1E83]\n\t(No symbol) [0x00007FF6973C670A]\n\t(No symbol) [0x00007FF6973C7964]\n\tGetHandleVerifier [0x00007FF6978E0AAB+3694587]\n\tGetHandleVerifier [0x00007FF69793728E+4048862]\n\tGetHandleVerifier [0x00007FF69792F173+4015811]\n\tGetHandleVerifier [0x00007FF6976047D6+695590]\n\t(No symbol) [0x00007FF6974E0CE8]\n\t(No symbol) [0x00007FF6974DCF34]\n\t(No symbol) [0x00007FF6974DD062]\n\t(No symbol) [0x00007FF6974CD3A3]\n\tBaseThreadInitThunk [0x00007FF89B8B7344+20]\n\tRtlUserThreadStart [0x00007FF89D6226B1+33]", "trace": "self = <allure_commons._allure.fixture object at 0x00000204AF3C9DC0>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\nenv\\Lib\\site-packages\\allure_commons\\_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:12: in driver\n    attach = driver.get_screenshot_as_png()\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:835: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:846: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000204AF3C9F10>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"This alert appeared after 5 seconds\"},\"error\":\"unexpected alert op...07FF6974CD3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FF89B8B7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF89D6226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This alert appeared after 5 seconds\nE           Message: unexpected alert open: {Alert text : This alert appeared after 5 seconds}\nE             (Session info: chrome=119.0.6045.160)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF6975682B2+55298]\nE           \t(No symbol) [0x00007FF6974D5E02]\nE           \t(No symbol) [0x00007FF6973905AB]\nE           \t(No symbol) [0x00007FF69740ACE7]\nE           \t(No symbol) [0x00007FF6973F1E83]\nE           \t(No symbol) [0x00007FF6973C670A]\nE           \t(No symbol) [0x00007FF6973C7964]\nE           \tGetHandleVerifier [0x00007FF6978E0AAB+3694587]\nE           \tGetHandleVerifier [0x00007FF69793728E+4048862]\nE           \tGetHandleVerifier [0x00007FF69792F173+4015811]\nE           \tGetHandleVerifier [0x00007FF6976047D6+695590]\nE           \t(No symbol) [0x00007FF6974E0CE8]\nE           \t(No symbol) [0x00007FF6974DCF34]\nE           \t(No symbol) [0x00007FF6974DD062]\nE           \t(No symbol) [0x00007FF6974CD3A3]\nE           \tBaseThreadInitThunk [0x00007FF89B8B7344+20]\nE           \tRtlUserThreadStart [0x00007FF89D6226B1+33]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "steps": [{"name": "Open a browser", "status": "passed", "start": 1700317576915, "stop": 1700317598114}, {"name": "check alert appear after 5 sec", "status": "passed", "steps": [{"name": "Find a visible element", "status": "passed", "parameters": [{"name": "locator", "value": "('css selector', \"button[id='timerAlertButton']\")"}, {"name": "timeout", "value": "10"}], "start": 1700317598115, "stop": 1700317598134}], "start": 1700317598115, "stop": 1700317604165}], "start": 1700317576915, "stop": 1700317604165, "uuid": "0ccaa267-3f2f-4dcd-8bb0-9bca7d1bdfa2", "historyId": "45573328edcbc4cb2374ceef74d3c884", "testCaseId": "45573328edcbc4cb2374ceef74d3c884", "fullName": "tests.alerts_frame_windows_test.TestAlerts#test_see_alert", "labels": [{"name": "feature", "value": "Alerts Page"}, {"name": "suite", "value": "Alerts, Frame & Windows"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestAlertsFrameWindow"}, {"name": "host", "value": "LAPTOP-JVHUTG0F"}, {"name": "thread", "value": "15604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.alerts_frame_windows_test"}]}